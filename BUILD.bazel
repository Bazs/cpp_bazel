load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

cc_library(
    name = "my_string",
    srcs = [
        "src/my_string.cpp",
        "src/my_string.h",
    ],
)

cc_library(
    name = "my_util_a",
    srcs = [
        "src/my_util_a.cpp",
        "src/my_util_a.h",
    ],
    deps = [":my_string"],
)

cc_library(
    name = "my_util_b",
    srcs = [
        "src/my_util_b.cpp",
        "src/my_util_b.h",
    ],
    deps = [":my_string"],
)

cc_binary(
    name = "main",
    srcs = ["src/main.cpp"],
    deps = [
        ":my_util_a",
        ":my_util_b",
    ],
)

cc_library(
    name = "swap",
    srcs = ["src/swap.h"],
)

cc_binary(
    name = "test_swap",
    srcs = ["src/test_swap.cpp"],
    deps = [":swap"],
)

cc_binary(
    name = "ranges_demo",
    srcs = ["src/ranges_demo.cpp"],
)

# Tools

refresh_compile_commands(
    name = "refresh_compile_commands",

    # Specify the targets of interest.
    # For example, specify a dict of targets and any flags required to build.
    targets = {
        "//...": "",
    },
    # No need to add flags already in .bazelrc. They're automatically picked up.
    # If you don't need flags, a list of targets is also okay, as is a single target string.
    # Wildcard patterns, like //... for everything, *are* allowed here, just like a build.
    # As are additional targets (+) and subtractions (-), like in bazel query https://docs.bazel.build/versions/main/query.html#expressions
    # And if you're working on a header-only library, specify a test or binary target that compiles it.
)

buildifier(
    name = "buildifier.fix",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "warn",
    mode = "fix",
)
